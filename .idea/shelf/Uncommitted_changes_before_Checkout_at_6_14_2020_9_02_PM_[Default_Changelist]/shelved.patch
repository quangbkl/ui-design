Index: src/hooks/app/AppProvider.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useEffect, useState} from 'react';\r\nimport AppContext from './AppContext';\r\nimport I18n from 'i18n/i18n';\r\nimport initialSettingsFromStorage from './actions/initialSettingsFromStorage';\r\nimport changeLanguage from './actions/changeLanguage';\r\nimport changeTheme from './actions/changeTheme';\r\nimport changeThemeMode from './actions/changeThemeMode';\r\nimport {BaseColor, ThemeColor, ThemeModeColor} from 'config/color';\r\nimport {ThemeModeConstant} from 'config/constant';\r\n\r\nconst initialState = {\r\n    locale: 'en',\r\n    i18n: I18n,\r\n    theme: 'orange',\r\n    themeMode: ThemeModeConstant.THEME_MODE_LIGHT\r\n};\r\n\r\nconst AppProvider = ({children, ...props}) => {\r\n    const [locale, setLocale] = useState(initialState.locale);\r\n    const [i18n, setI18n] = useState(initialState.i18n);\r\n    const [theme, setTheme] = useState(initialState.theme);\r\n    const [themeMode, setThemeMode] = useState(initialState.themeMode);\r\n\r\n    useEffect(() => {\r\n        initialSettingsFromStorage({\r\n            locale,\r\n            setLocale,\r\n            i18n,\r\n            setI18n,\r\n            theme,\r\n            setTheme,\r\n            themeMode,\r\n            setThemeMode\r\n        }).catch(console.log);\r\n    }, []);\r\n\r\n    const value = {\r\n        state: {\r\n            locale,\r\n            i18n,\r\n            theme,\r\n            themeMode,\r\n            color: {\r\n                ...BaseColor,\r\n                ...ThemeColor[theme],\r\n                ...ThemeModeColor[themeMode]\r\n            },\r\n            colors: {   // TODO: remove color\r\n                ...BaseColor,\r\n                ...ThemeColor[theme],\r\n                ...ThemeModeColor[themeMode]\r\n            }\r\n        },\r\n        actions: {\r\n            changeLanguage: changeLanguage({locale, setLocale, i18n, setI18n}),\r\n            changeTheme: changeTheme({theme, setTheme}),\r\n            changeThemeMode: changeThemeMode({themeMode, setThemeMode})\r\n        }\r\n    };\r\n\r\n    return (\r\n        <AppContext.Provider value={value}>\r\n            {\r\n                React.Children.map(children, child =>\r\n                    React.cloneElement(child, {...props})\r\n                )\r\n            }\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n\r\nAppProvider.propTypes = {};\r\n\r\nexport default AppProvider;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/hooks/app/AppProvider.js	(revision 922db6c19ee538702f3b29d14cd87a2c2aa44bf6)
+++ src/hooks/app/AppProvider.js	(date 1592143295954)
@@ -5,6 +5,7 @@
 import changeLanguage from './actions/changeLanguage';
 import changeTheme from './actions/changeTheme';
 import changeThemeMode from './actions/changeThemeMode';
+import handleSignIn from './actions/handleSignIn';
 import {BaseColor, ThemeColor, ThemeModeColor} from 'config/color';
 import {ThemeModeConstant} from 'config/constant';
 
@@ -20,6 +21,7 @@
     const [i18n, setI18n] = useState(initialState.i18n);
     const [theme, setTheme] = useState(initialState.theme);
     const [themeMode, setThemeMode] = useState(initialState.themeMode);
+    const [isSigned, setIsSigned] = useState(false);
 
     useEffect(() => {
         initialSettingsFromStorage({
@@ -40,6 +42,7 @@
             i18n,
             theme,
             themeMode,
+            isSigned,
             color: {
                 ...BaseColor,
                 ...ThemeColor[theme],
@@ -54,7 +57,8 @@
         actions: {
             changeLanguage: changeLanguage({locale, setLocale, i18n, setI18n}),
             changeTheme: changeTheme({theme, setTheme}),
-            changeThemeMode: changeThemeMode({themeMode, setThemeMode})
+            changeThemeMode: changeThemeMode({themeMode, setThemeMode}),
+            handleSignIn: handleSignIn({setIsSigned})
         }
     };
 
Index: src/helpers/response.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/helpers/response.js	(date 1592143288763)
+++ src/helpers/response.js	(date 1592143288763)
@@ -0,0 +1,10 @@
+export const getErrorMessage = e => {
+    if (e.response && e.response.data && e.response.data.message) return e.response.data.message;
+    if (e.response && e.response.data) return e.response.data;
+
+    return e.message || e;
+};
+
+export default {
+    getErrorMessage
+};
Index: src/hooks/app/actions/handleSignIn.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/hooks/app/actions/handleSignIn.js	(date 1592143288790)
+++ src/hooks/app/actions/handleSignIn.js	(date 1592143288790)
@@ -0,0 +1,11 @@
+import authServices from 'services/authServices';
+
+export default ({setIsSigned}) => async ({email, password}) => {
+    try {
+        await authServices.signIn({email, password});
+        setIsSigned(true);
+    } catch (e) {
+        setIsSigned(false);
+        throw e;
+    }
+}
Index: src/screens/auth/Walkthrough/WalkthroughScreen.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\r\nimport {View, StyleSheet} from 'react-native';\r\nimport ImageSlider from './ImageSlider';\r\nimport AuthForm from './AuthForm';\r\nimport appRoutes from 'navigations/appRoutes';\r\n\r\nconst WalkthroughScreen = (props) => {\r\n    const {navigation} = props;\r\n\r\n    const goToSignUp = () => {\r\n        return navigation.navigate(appRoutes.SIGN_UP);\r\n    };\r\n\r\n    const goToSignIn = () => {\r\n        return navigation.navigate(appRoutes.SIGN_IN);\r\n    };\r\n\r\n    const goToMain = () => {\r\n        return navigation.navigate(appRoutes.MAIN);\r\n    };\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <ImageSlider/>\r\n            <AuthForm goToSignIn={goToSignIn} goToMain={goToMain} goToSignUp={goToSignUp}/>\r\n        </View>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: 'white',\r\n    },\r\n});\r\n\r\nexport default WalkthroughScreen;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/screens/auth/Walkthrough/WalkthroughScreen.js	(revision 922db6c19ee538702f3b29d14cd87a2c2aa44bf6)
+++ src/screens/auth/Walkthrough/WalkthroughScreen.js	(date 1592143281216)
@@ -1,8 +1,12 @@
 import React from 'react';
-import {View, StyleSheet} from 'react-native';
+import {View, StyleSheet, SafeAreaView, ScrollView} from 'react-native';
 import ImageSlider from './ImageSlider';
 import AuthForm from './AuthForm';
+import Swiper from "react-native-swiper";
 import appRoutes from 'navigations/appRoutes';
+import scaleWithPixel from '../../../helpers/scaleWithPixel';
+import {BaseStyle} from '../../../config/theme';
+import scrollEnabled from '../../../helpers/scrollEnabled';
 
 const WalkthroughScreen = (props) => {
     const {navigation} = props;
@@ -19,19 +23,121 @@
         return navigation.navigate(appRoutes.MAIN);
     };
 
+    const styles = StyleSheet.create({
+        contain: {
+            paddingHorizontal: 20,
+            marginVertical: 20
+        },
+        wrapper: {
+            width: '100%',
+            height: 350
+        },
+        contentPage: {
+            bottom: 0
+        },
+        contentActionBottom: {
+            flexDirection: 'row',
+            justifyContent: 'space-between',
+            marginTop: 25
+        },
+        img: {
+            width: scaleWithPixel(200),
+            height: scaleWithPixel(200),
+            borderRadius: scaleWithPixel(200) / 2
+        },
+        slide: {
+            alignItems: 'center',
+            justifyContent: 'center',
+            flex: 1
+        },
+        textSlide: {
+            marginTop: 30
+        }
+    });
+
     return (
-        <View style={styles.container}>
-            <ImageSlider/>
-            <AuthForm goToSignIn={goToSignIn} goToMain={goToMain} goToSignUp={goToSignUp}/>
-        </View>
-    );
-};
+        <SafeAreaView
+            style={BaseStyle.safeAreaView}
+            forceInset={{top: 'always'}}
+        >
+            <ScrollView
+                style={styles.contain}
+                scrollEnabled={this.state.scrollEnabled}
+                onContentSizeChange={(contentWidth, contentHeight) =>
+                    this.setState({
+                        scrollEnabled: scrollEnabled(
+                            contentWidth,
+                            contentHeight
+                        )
+                    })
+                }
+            >
+                <View style={styles.wrapper}>
+                    <Swiper
+                        dotStyle={{
+                            backgroundColor: BaseColor.textSecondaryColor
+                        }}
+                        activeDotColor={BaseColor.primaryColor}
+                        paginationStyle={styles.contentPage}
+                        removeClippedSubviews={false}
+                    >
+                        {this.state.slide.map((item, index) => {
+                            return (
+                                <View style={styles.slide} key={item.key}>
+                                    <Image
+                                        source={item.image}
+                                        style={styles.img}
+                                    />
+                                    <Text body1 style={styles.textSlide}>
+                                        Picking your travel destinations
+                                    </Text>
+                                </View>
+                            );
+                        })}
+                    </Swiper>
+                </View>
+                <View style={{width: '100%'}}>
+                    <Button
+                        full
+                        style={{
+                            backgroundColor: BaseColor.navyBlue,
+                            marginTop: 20
+                        }}
+                        onPress={() => {
+                            this.authentication();
+                        }}
+                    >
+                        Login with Facebook
+                    </Button>
+                    <Button
+                        full
+                        style={{marginTop: 20}}
+                        loading={this.state.loading}
+                        onPress={() => navigation.navigate('SignIn')}
+                    >
+                        Sign In
+                    </Button>
+                    <View style={styles.contentActionBottom}>
+                        <TouchableOpacity
+                            onPress={() => navigation.navigate('SignUp')}
+                        >
+                            <Text body1 grayColor>
+                                Haven’t registered yet?
+                            </Text>
+                        </TouchableOpacity>
 
-const styles = StyleSheet.create({
-    container: {
-        flex: 1,
-        backgroundColor: 'white',
-    },
-});
+                        <TouchableOpacity
+                            onPress={() => this.authentication()}
+                        >
+                            <Text body1 primaryColor>
+                                Join Now
+                            </Text>
+                        </TouchableOpacity>
+                    </View>
+                </View>
+            </ScrollView>
+        </SafeAreaView>
+    );
+};
 
 export default WalkthroughScreen;
Index: src/helpers/scaleWithPixel.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/helpers/scaleWithPixel.js	(date 1592143295981)
+++ src/helpers/scaleWithPixel.js	(date 1592143295981)
@@ -0,0 +1,10 @@
+import {PixelRatio} from 'react-native';
+
+const scaleValue = PixelRatio.get() / 2;
+
+const scaleWithPixel = (size, limitScale = 1.2) => {
+    const value = scaleValue > limitScale ? limitScale : scaleValue;
+    return size * value;
+};
+
+export default scaleWithPixel;
Index: src/components-v2/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components-v2/package.json	(date 1592143295927)
+++ src/components-v2/package.json	(date 1592143295927)
@@ -0,0 +1,3 @@
+{
+  "name": "components-v2"
+}
Index: src/helpers/scrollEnabled.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/helpers/scrollEnabled.js	(date 1592143295989)
+++ src/helpers/scrollEnabled.js	(date 1592143295989)
@@ -0,0 +1,30 @@
+import {Platform, Dimensions} from 'react-native';
+import DeviceInfo from 'react-native-device-info';
+
+export const heightHeader = () => {
+    const OS = Platform.OS;
+    const landscape = Dimensions.get('window').width > Dimensions.get('window').height;
+    let model = DeviceInfo.getModel();
+    if (model.includes('iPad')) model = 'iPad';
+    if (OS === 'ios') {
+        switch (model) {
+            case 'iPhone X':
+            case 'iPhone XS':
+            case 'iPhone XS Max':
+            case 'iPhone XR':
+                return landscape ? 45 : 88;
+            case 'iPad':
+                return 65;
+            default:
+                return landscape ? 45 : 65;
+        }
+    } else {
+        return 45;
+    }
+};
+
+const scrollEnabled = (contentWidth, contentHeight) => {
+    return contentHeight > Dimensions.get('window').height - heightHeader();
+};
+
+export default scrollEnabled;
Index: src/__mocks__/db/user-db.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import mock from './../mock';\r\n\r\nconst userDB = {\r\n    users: [\r\n        {\r\n            full_name: 'Full Name 1',\r\n            email: 'test1@gmail.com',\r\n            password: '123456789',\r\n            role: 'admin',\r\n        },\r\n        {\r\n            full_name: 'Full Name 2',\r\n            email: 'test2@gmail.com',\r\n            password: '123456789',\r\n            role: 'user',\r\n        },\r\n        {\r\n            full_name: 'Full Name 3',\r\n            email: 'test3@gmail.com',\r\n            password: '123456789',\r\n            role: 'guest',\r\n        },\r\n    ],\r\n};\r\n\r\nmock.onGet('/api/users').reply((request) => {\r\n    const {page, limit} = request.params;\r\n    const {users} = userDB;\r\n    return [200, {users, page: 1, limit: 10, total: users.length}];\r\n});\r\n\r\nmock.onPost('/auth/sign-up').reply((request) => {\r\n    const {full_name, email, password} = request.data;\r\n    const {users} = userDB;\r\n    const user = {full_name, email, password, role: 'guest'};\r\n    userDB.users = [...users, user];\r\n    return [200, {user}];\r\n});\r\n\r\n\r\nmock.onPost('/auth/sign-in').reply((request) => {\r\n    const {email, password} = JSON.parse(request.data);\r\n    const {users} = userDB;\r\n\r\n    const user = users.find(user => user.email === email && user.password === password);\r\n\r\n    if (user) {\r\n        return [200, {user}];\r\n    }\r\n\r\n    return [400, {code: 'incorrect_email_or_password', message: 'Incorrect email or password'}];\r\n});\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/__mocks__/db/user-db.js	(revision 922db6c19ee538702f3b29d14cd87a2c2aa44bf6)
+++ src/__mocks__/db/user-db.js	(date 1592143292571)
@@ -6,21 +6,21 @@
             full_name: 'Full Name 1',
             email: 'test1@gmail.com',
             password: '123456789',
-            role: 'admin',
+            role: 'admin'
         },
         {
             full_name: 'Full Name 2',
             email: 'test2@gmail.com',
             password: '123456789',
-            role: 'user',
+            role: 'user'
         },
         {
             full_name: 'Full Name 3',
             email: 'test3@gmail.com',
             password: '123456789',
-            role: 'guest',
-        },
-    ],
+            role: 'guest'
+        }
+    ]
 };
 
 mock.onGet('/api/users').reply((request) => {
Index: src/navigations/MainNavigator.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\r\nimport {createBottomTabNavigator} from '@react-navigation/bottom-tabs';\r\nimport FontAwesome5 from 'react-native-vector-icons/FontAwesome5';\r\nimport appRoutes from './appRoutes';\r\nimport HomeNavigator from './HomeNavigator';\r\nimport BookingNavigator from './BookingNavigator';\r\nimport NewsNavigator from './NewsNavigator';\r\nimport AccountNavigator from './AccountNavigator';\r\nimport useApp from '../hooks/app/useApp';\r\n\r\nconst Tab = createBottomTabNavigator();\r\n\r\nconst ROOT_ROUTES = [appRoutes.HOME, appRoutes.BOOKING, appRoutes.POST_LIST, appRoutes.PROFILE_SETTING];\r\n\r\nconst isOneOfRootRoutes = (currentRoute) => {\r\n    return ROOT_ROUTES.find(route => currentRoute.name === route) !== undefined;\r\n};\r\n\r\nconst TabBarVisibleOnRootScreenOptions = ({route}) => {\r\n    const currentRoute = route.state && route.state.routes[route.state.index];\r\n    return {tabBarVisible: currentRoute && isOneOfRootRoutes(currentRoute)};\r\n};\r\n\r\nconst MainNavigator = () => {\r\n    const {state: appState} = useApp();\r\n    const {color} = appState;\r\n\r\n    return (\r\n        <Tab.Navigator\r\n            initialRouteName={appRoutes.HOME}\r\n            screenOptions={TabBarVisibleOnRootScreenOptions}\r\n            tabBarOptions={{\r\n                activeTintColor: color.primaryColor,\r\n                inactiveTintColor: color.grayColor,\r\n                style: {\r\n                    backgroundColor: color.fieldColor\r\n                }\r\n            }}\r\n        >\r\n            <Tab.Screen\r\n                name={appRoutes.HOME}\r\n                component={HomeNavigator}\r\n                options={{\r\n                    tabBarLabel: appRoutes.HOME,\r\n                    tabBarIcon: ({color, size}) => (\r\n                        <FontAwesome5 name=\"home\" color={color} size={size} solid/>\r\n                    )\r\n                }}\r\n            />\r\n            <Tab.Screen\r\n                name={appRoutes.BOOKING}\r\n                component={BookingNavigator}\r\n                options={{\r\n                    tabBarLabel: appRoutes.BOOKING,\r\n                    tabBarIcon: ({color, size}) => (\r\n                        <FontAwesome5 name=\"bookmark\" color={color} size={size} solid/>\r\n                    )\r\n                }}\r\n            />\r\n            <Tab.Screen\r\n                name={appRoutes.NEWS}\r\n                component={NewsNavigator}\r\n                options={{\r\n                    tabBarLabel: appRoutes.NEWS,\r\n                    tabBarIcon: ({color, size}) => (\r\n                        <FontAwesome5 name=\"copy\" color={color} size={size} solid/>\r\n                    )\r\n                }}\r\n            />\r\n            <Tab.Screen\r\n                name={appRoutes.ACCOUNT}\r\n                component={AccountNavigator}\r\n                options={{\r\n                    tabBarLabel: appRoutes.ACCOUNT,\r\n                    tabBarIcon: ({color, size}) => (\r\n                        <FontAwesome5 name=\"user-circle\" color={color} size={size} solid/>\r\n                    )\r\n                }}\r\n            />\r\n\r\n        </Tab.Navigator>\r\n    );\r\n};\r\n\r\nexport default MainNavigator;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/navigations/MainNavigator.js	(revision 922db6c19ee538702f3b29d14cd87a2c2aa44bf6)
+++ src/navigations/MainNavigator.js	(date 1592143295972)
@@ -7,6 +7,7 @@
 import NewsNavigator from './NewsNavigator';
 import AccountNavigator from './AccountNavigator';
 import useApp from '../hooks/app/useApp';
+import {useNavigation} from '@react-navigation/native';
 
 const Tab = createBottomTabNavigator();
 
@@ -23,7 +24,11 @@
 
 const MainNavigator = () => {
     const {state: appState} = useApp();
-    const {color} = appState;
+    const {color, isSigned} = appState;
+
+    const navigation = useNavigation();
+
+    if (!isSigned) navigation.navigate(appRoutes.AUTH);
 
     return (
         <Tab.Navigator
Index: src/config/color.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export const BaseColor = {\r\n    primaryColor: '#E5634D', // primary color for your app, usually your brand color.\r\n    darkPrimaryColor: '#C31C0D', // color is darker base on BaseColor.primaryColor\r\n    lightPrimaryColor: '#FF8A65', // // color is lighter base on BaseColor.primaryColor\r\n    accentColor: '#4A90A4', // secondary color for your app which complements the primary color.\r\n    textPrimaryColor: '#212121', // text color for content.\r\n    textSecondaryColor: '#E0E0E1', // text color for content.\r\n    grayColor: '#9B9B9B', // gray color, just common using for app\r\n    darkBlueColor: '#24253D', // dark blue color, just common using for app\r\n    dividerColor: '#BDBDBD', // color for separator\r\n    whiteColor: '#FFFFFF', // white color\r\n    fieldColor: '#F5F5F5', // common field color like input, text area\r\n    yellowColor: '#FDC60A', // just another color use for the app\r\n    navyBlue: '#3C5A99', // just another color use for the app,\r\n    bluePrimaryColor: '#1890FF',\r\n    backgroundPrimaryColor: '#F2F2F2',\r\n    backgroundSecondaryColor: '#FFFFFF',\r\n    backgroundTertiaryColor: '#F5F5F5'\r\n};\r\n\r\nexport const ThemeColor = {\r\n    orange: {\r\n        primaryColor: '#E5634D',\r\n        darkPrimaryColor: '#C31C0D',\r\n        lightPrimaryColor: '#FF8A65',\r\n        accentColor: '#4A90A4'\r\n    },\r\n    pink: {\r\n        primaryColor: '#E91E63',\r\n        darkPrimaryColor: '#C2185B',\r\n        lightPrimaryColor: '#F8BBD0',\r\n        accentColor: '#448AFF'\r\n    },\r\n    blue: {\r\n        primaryColor: '#2196F3',\r\n        darkPrimaryColor: '#1976D2',\r\n        lightPrimaryColor: '#BBDEFB',\r\n        accentColor: '#8BC34A'\r\n    },\r\n    green: {\r\n        primaryColor: '#4CAF50',\r\n        darkPrimaryColor: '#388E3C',\r\n        lightPrimaryColor: '#C8E6C9',\r\n        accentColor: '#FF9800'\r\n    },\r\n    yellow: {\r\n        primaryColor: '#FFEB3B',\r\n        darkPrimaryColor: '#FBC02D',\r\n        lightPrimaryColor: '#FFF9C4',\r\n        accentColor: '#9E9E9E'\r\n    }\r\n};\r\n\r\nexport const ThemeModeColor = {\r\n    light: {\r\n        backgroundPrimaryColor: '#F2F2F2',\r\n        backgroundSecondaryColor: '#FFFFFF'\r\n    },\r\n    dark: {\r\n        backgroundPrimaryColor: '#F2F2F2',\r\n        backgroundSecondaryColor: '#FFFFFF'\r\n    }\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/config/color.js	(revision 922db6c19ee538702f3b29d14cd87a2c2aa44bf6)
+++ src/config/color.js	(date 1592143292584)
@@ -53,11 +53,11 @@
 
 export const ThemeModeColor = {
     light: {
-        backgroundPrimaryColor: '#F2F2F2',
-        backgroundSecondaryColor: '#FFFFFF'
+        backgroundPrimaryColor: '#FFFFFF',
+        backgroundSecondaryColor: '#F5F5F5'
     },
     dark: {
-        backgroundPrimaryColor: '#F2F2F2',
+        backgroundPrimaryColor: '#f2f2f2',
         backgroundSecondaryColor: '#FFFFFF'
     }
 };
diff --git src/screens/home/CheckOut/CheckOutScreen.js src/screens/home/CheckOut/CheckOutScreen.js
new file mode 100644
